// Code generated by ent, DO NOT EDIT.

package db

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/redhat-appstudio/quality-studio/pkg/storage/ent/db/plugins"
)

// Plugins is the model entity for the Plugins schema.
type Plugins struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Category holds the value of the "category" field.
	Category string `json:"category,omitempty"`
	// Logo holds the value of the "logo" field.
	Logo string `json:"logo,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Reason holds the value of the "reason" field.
	Reason string `json:"reason,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PluginsQuery when eager-loading is set.
	Edges PluginsEdges `json:"edges"`
}

// PluginsEdges holds the relations/edges for other nodes in the graph.
type PluginsEdges struct {
	// Teams holds the value of the teams edge.
	Teams []*Teams `json:"teams,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TeamsOrErr returns the Teams value or an error if the edge
// was not loaded in eager-loading.
func (e PluginsEdges) TeamsOrErr() ([]*Teams, error) {
	if e.loadedTypes[0] {
		return e.Teams, nil
	}
	return nil, &NotLoadedError{edge: "teams"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Plugins) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case plugins.FieldName, plugins.FieldCategory, plugins.FieldLogo, plugins.FieldDescription, plugins.FieldReason:
			values[i] = new(sql.NullString)
		case plugins.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Plugins", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Plugins fields.
func (pl *Plugins) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case plugins.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pl.ID = *value
			}
		case plugins.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pl.Name = value.String
			}
		case plugins.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				pl.Category = value.String
			}
		case plugins.FieldLogo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field logo", values[i])
			} else if value.Valid {
				pl.Logo = value.String
			}
		case plugins.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				pl.Description = value.String
			}
		case plugins.FieldReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reason", values[i])
			} else if value.Valid {
				pl.Reason = value.String
			}
		}
	}
	return nil
}

// QueryTeams queries the "teams" edge of the Plugins entity.
func (pl *Plugins) QueryTeams() *TeamsQuery {
	return NewPluginsClient(pl.config).QueryTeams(pl)
}

// Update returns a builder for updating this Plugins.
// Note that you need to call Plugins.Unwrap() before calling this method if this Plugins
// was returned from a transaction, and the transaction was committed or rolled back.
func (pl *Plugins) Update() *PluginsUpdateOne {
	return NewPluginsClient(pl.config).UpdateOne(pl)
}

// Unwrap unwraps the Plugins entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pl *Plugins) Unwrap() *Plugins {
	_tx, ok := pl.config.driver.(*txDriver)
	if !ok {
		panic("db: Plugins is not a transactional entity")
	}
	pl.config.driver = _tx.drv
	return pl
}

// String implements the fmt.Stringer.
func (pl *Plugins) String() string {
	var builder strings.Builder
	builder.WriteString("Plugins(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pl.ID))
	builder.WriteString("name=")
	builder.WriteString(pl.Name)
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(pl.Category)
	builder.WriteString(", ")
	builder.WriteString("logo=")
	builder.WriteString(pl.Logo)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(pl.Description)
	builder.WriteString(", ")
	builder.WriteString("reason=")
	builder.WriteString(pl.Reason)
	builder.WriteByte(')')
	return builder.String()
}

// PluginsSlice is a parsable slice of Plugins.
type PluginsSlice []*Plugins

func (pl PluginsSlice) config(cfg config) {
	for _i := range pl {
		pl[_i].config = cfg
	}
}
