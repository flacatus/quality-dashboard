// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/redhat-appstudio/quality-studio/pkg/storage/ent/db/plugins"
	"github.com/redhat-appstudio/quality-studio/pkg/storage/ent/db/predicate"
)

// PluginsUpdate is the builder for updating Plugins entities.
type PluginsUpdate struct {
	config
	hooks    []Hook
	mutation *PluginsMutation
}

// Where appends a list predicates to the PluginsUpdate builder.
func (pu *PluginsUpdate) Where(ps ...predicate.Plugins) *PluginsUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetName sets the "name" field.
func (pu *PluginsUpdate) SetName(s string) *PluginsUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetCategory sets the "category" field.
func (pu *PluginsUpdate) SetCategory(s string) *PluginsUpdate {
	pu.mutation.SetCategory(s)
	return pu
}

// SetLogo sets the "logo" field.
func (pu *PluginsUpdate) SetLogo(s string) *PluginsUpdate {
	pu.mutation.SetLogo(s)
	return pu
}

// SetDescription sets the "description" field.
func (pu *PluginsUpdate) SetDescription(s string) *PluginsUpdate {
	pu.mutation.SetDescription(s)
	return pu
}

// SetStatus sets the "status" field.
func (pu *PluginsUpdate) SetStatus(s string) *PluginsUpdate {
	pu.mutation.SetStatus(s)
	return pu
}

// Mutation returns the PluginsMutation object of the builder.
func (pu *PluginsUpdate) Mutation() *PluginsMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PluginsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, PluginsMutation](ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PluginsUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PluginsUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PluginsUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PluginsUpdate) check() error {
	if v, ok := pu.mutation.Name(); ok {
		if err := plugins.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`db: validator failed for field "Plugins.name": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Category(); ok {
		if err := plugins.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`db: validator failed for field "Plugins.category": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Logo(); ok {
		if err := plugins.LogoValidator(v); err != nil {
			return &ValidationError{Name: "logo", err: fmt.Errorf(`db: validator failed for field "Plugins.logo": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Status(); ok {
		if err := plugins.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`db: validator failed for field "Plugins.status": %w`, err)}
		}
	}
	return nil
}

func (pu *PluginsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   plugins.Table,
			Columns: plugins.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: plugins.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(plugins.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.Category(); ok {
		_spec.SetField(plugins.FieldCategory, field.TypeString, value)
	}
	if value, ok := pu.mutation.Logo(); ok {
		_spec.SetField(plugins.FieldLogo, field.TypeString, value)
	}
	if value, ok := pu.mutation.Description(); ok {
		_spec.SetField(plugins.FieldDescription, field.TypeString, value)
	}
	if value, ok := pu.mutation.Status(); ok {
		_spec.SetField(plugins.FieldStatus, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{plugins.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PluginsUpdateOne is the builder for updating a single Plugins entity.
type PluginsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PluginsMutation
}

// SetName sets the "name" field.
func (puo *PluginsUpdateOne) SetName(s string) *PluginsUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetCategory sets the "category" field.
func (puo *PluginsUpdateOne) SetCategory(s string) *PluginsUpdateOne {
	puo.mutation.SetCategory(s)
	return puo
}

// SetLogo sets the "logo" field.
func (puo *PluginsUpdateOne) SetLogo(s string) *PluginsUpdateOne {
	puo.mutation.SetLogo(s)
	return puo
}

// SetDescription sets the "description" field.
func (puo *PluginsUpdateOne) SetDescription(s string) *PluginsUpdateOne {
	puo.mutation.SetDescription(s)
	return puo
}

// SetStatus sets the "status" field.
func (puo *PluginsUpdateOne) SetStatus(s string) *PluginsUpdateOne {
	puo.mutation.SetStatus(s)
	return puo
}

// Mutation returns the PluginsMutation object of the builder.
func (puo *PluginsUpdateOne) Mutation() *PluginsMutation {
	return puo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PluginsUpdateOne) Select(field string, fields ...string) *PluginsUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Plugins entity.
func (puo *PluginsUpdateOne) Save(ctx context.Context) (*Plugins, error) {
	return withHooks[*Plugins, PluginsMutation](ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PluginsUpdateOne) SaveX(ctx context.Context) *Plugins {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PluginsUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PluginsUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PluginsUpdateOne) check() error {
	if v, ok := puo.mutation.Name(); ok {
		if err := plugins.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`db: validator failed for field "Plugins.name": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Category(); ok {
		if err := plugins.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`db: validator failed for field "Plugins.category": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Logo(); ok {
		if err := plugins.LogoValidator(v); err != nil {
			return &ValidationError{Name: "logo", err: fmt.Errorf(`db: validator failed for field "Plugins.logo": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Status(); ok {
		if err := plugins.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`db: validator failed for field "Plugins.status": %w`, err)}
		}
	}
	return nil
}

func (puo *PluginsUpdateOne) sqlSave(ctx context.Context) (_node *Plugins, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   plugins.Table,
			Columns: plugins.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: plugins.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "Plugins.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, plugins.FieldID)
		for _, f := range fields {
			if !plugins.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != plugins.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(plugins.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.Category(); ok {
		_spec.SetField(plugins.FieldCategory, field.TypeString, value)
	}
	if value, ok := puo.mutation.Logo(); ok {
		_spec.SetField(plugins.FieldLogo, field.TypeString, value)
	}
	if value, ok := puo.mutation.Description(); ok {
		_spec.SetField(plugins.FieldDescription, field.TypeString, value)
	}
	if value, ok := puo.mutation.Status(); ok {
		_spec.SetField(plugins.FieldStatus, field.TypeString, value)
	}
	_node = &Plugins{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{plugins.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
